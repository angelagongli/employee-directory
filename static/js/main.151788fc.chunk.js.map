{"version":3,"sources":["components/Jumbotron.js","components/Table.js","components/Search.js","utils/API.js","components/Directory.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","Table","props","scope","onClick","handleSortChange","sortDirection","data","map","row","key","name","first","last","src","picture","thumbnail","alt","phone","email","moment","dob","date","format","Search","type","value","onChange","handleInputChange","placeholder","id","axios","get","Directory","state","search","results","tableData","sortTable","sort","a","b","event","target","setState","filtered","filter","element","includes","API","then","response","catch","error","console","log","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.151788fc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n                <h1><i className=\"fas fa-lightbulb\"></i><br />Welcome to Li's Light Fixtures</h1>\r\n                <h4>A Practical Place Staffed by Practical People</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nfunction Table(props) {\r\n    return (\r\n        <table className=\"table table-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\">Photo</th>\r\n                    <th scope=\"col\" className=\"sorted\" onClick={props.handleSortChange}>\r\n                        Name <i className={\"fas fa-caret-\" + (props.sortDirection === \"asc\" ? \"up\" : \"down\")}></i> \r\n                    </th>\r\n                    <th scope=\"col\">Phone</th>\r\n                    <th scope=\"col\">Email</th>\r\n                    <th scope=\"col\">DOB</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.data.map(row => \r\n                    <tr key={row.name.first + \" \" + row.name.last}>\r\n                        <td><img src={row.picture.thumbnail} alt={row.name.first + \" \" + row.name.last} /></td>\r\n                        <td>{row.name.first + \" \" + row.name.last}</td>\r\n                        <td>{row.phone}</td>\r\n                        <td>{row.email}</td>\r\n                        <td>{moment(row.dob.date).format(\"MM/DD/YYYY\")}</td>\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Table;","import React from \"react\";\r\n\r\nfunction Search(props) {\r\n    return (\r\n        <div className=\"search form-row\">\r\n            <div className=\"offset-3\"></div>\r\n            <div className=\"col-6\">\r\n                <input type=\"text\" className=\"form-control\" \r\n                    name=\"search\"\r\n                    value={props.value}\r\n                    onChange={props.handleInputChange}\r\n                    placeholder=\"Search employees by name, number or email address\"\r\n                    id=\"search\" />\r\n            </div>\r\n            <div className=\"offset-3\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import axios from \"axios\";\r\n\r\nexport default {\r\n    search: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=100&inc=picture,name,phone,email,dob&nat=us\");\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport Jumbotron from \"./Jumbotron\";\r\nimport Table from \"./Table\";\r\nimport Search from \"./Search\";\r\nimport API from \"../utils/API\";\r\nimport \"./style.css\";\r\n\r\nclass Directory extends Component {\r\n    state = {\r\n        search: \"\",\r\n        results: [],\r\n        tableData: [],\r\n        sortDirection: \"asc\"\r\n    }\r\n\r\n    sortTable = (data) => {\r\n        return data.sort((a, b) => {\r\n            if (a.name.last < b.name.last) {\r\n                return this.state.sortDirection === \"asc\" ? -1 : 1;\r\n            } else if (a.name.last === b.name.last &&\r\n                        a.name.first < b.name.first) {\r\n                return this.state.sortDirection === \"asc\" ? -1 : 1;\r\n            } else {\r\n                return this.state.sortDirection === \"asc\" ? 1 : -1;\r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.search().then(response => {\r\n            this.setState({\r\n                results: response.data.results,\r\n                tableData: this.sortTable(response.data.results)\r\n            })        \r\n        }).catch(error => {\r\n            console.log(error);\r\n        })\r\n\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        let { name, value } = event.target;\r\n        this.setState({ [name]: value }, () => {\r\n            let filtered = this.state.results.filter(element => {\r\n                if (element.name.first.includes(this.state.search) ||\r\n                    element.name.last.includes(this.state.search) ||\r\n                    element.phone.includes(this.state.search) ||\r\n                    element.email.includes(this.state.search)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n            });\r\n            this.setState({ tableData: this.sortTable(filtered) });\r\n        });\r\n    };\r\n\r\n    handleSortChange = () => {\r\n        this.setState({ sortDirection: this.state.sortDirection === \"asc\" ? \"desc\" : \"asc\" }, () => {\r\n            this.setState({ tableData: this.sortTable(this.state.tableData) });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <Jumbotron />\r\n                <div className=\"container\">\r\n                    <h2><i className=\"fas fa-user\"></i><br />Employee Directory</h2>\r\n                    <Search\r\n                        value={this.state.search}\r\n                        handleInputChange={this.handleInputChange} />\r\n                    <Table\r\n                        data={this.state.tableData} \r\n                        sortDirection={this.state.sortDirection}\r\n                        handleSortChange={this.handleSortChange} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Directory;","import React from 'react';\nimport Directory from \"./components/Directory\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Directory />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}